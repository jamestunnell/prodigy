#!/usr/bin/env ruby

require "prodigy"
require "docopt"
require "musicality"

include Musicality

FBASENAME = File.basename(__FILE__)
DOC = <<DOCOPT
Music composition tool

Usage:
  #{FBASENAME} compose [options]
  #{FBASENAME} -h | --help
  #{FBASENAME} --version

Options:
  -h --help       Show this screen.
  --version       Show version.
  --measures=<M>  Number of measures to compose [default: 8].
  --tempo=<Te>    Beats per minute [default: 120].
  --key=<K>       Key signature [default: Cmaj].
  --meter=<T>     Time signature [default: 4/4].

DOCOPT

def process_cmd_opts cmd_opts
  # Make sure the key signature is valid
  key_str = cmd_opts["--key"]
  key = nil
  begin
    key = key_str.to_key
  end
  raise InvalidOptionValueError, "Key \"#{key_str}\" is not valid" if key.nil?

  # Make sure the time signature is valid
  meter_str = cmd_opts["--meter"]
  meter = nil
  begin
    meter = meter_str.to_meter
  end
  raise InvalidOptionValueError, "Meter \"#{meter_str}\" is not valid" if meter.nil?

  # Make sure the number of measures is valid
  measures_str = cmd_opts["--measures"]
  measures = measures_str.to_i
  raise InvalidOptionValueError, "Measures #{measures_str} must be a positive integer" if measures <= 0

  # Make sure the tempo is valid
  tempo_str = cmd_opts["--tempo"]
  tempo = tempo_str.to_i
  raise InvalidOptionValueError, "Tempo #{tempo_str} must be a positive integer" if tempo <= 0

  return :key => key, :meter => meter, :measures => measures, :tempo => tempo
end

opts = {}
begin
  cmd_opts = Docopt::docopt(DOC, :help => true, :version => Prodigy::VERSION)
  opts = process_cmd_opts(cmd_opts)
  puts opts
  notes = Prodigy::Composer.new(opts[:key], opts[:meter]).compose(opts[:measures])
  part = Part.new(Dynamics::F, notes: notes)
  score = Score::Tempo.new(opts[:tempo], parts: {"piano" => part})

  print "Making MIDI sequence..."
  sequencer = ScoreSequencer.new(score)
  sequence = sequencer.make_midi_seq()

  print "Writing MIDI file '#{fout_name}'..."
  File.open('score.mid', 'wb'){ |fout| sequence.write(fout) }

rescue Docopt::Exit => e
  puts e.message
end

class InvalidOptionValueError < StandardError; end
